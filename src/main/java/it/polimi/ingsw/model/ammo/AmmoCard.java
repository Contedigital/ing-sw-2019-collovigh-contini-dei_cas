package it.polimi.ingsw.model.ammo;

import it.polimi.ingsw.model.Color;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 * This class represents the AmmoCard that are placed on the Map,
 * it has two constructor (one for the cards that contains a power ups).
 *
 * The constructors are never called directly as they are set private,
 * this way the card have to be generated by calling AmmoCard.generateRandCard().
 *
 * This class is also intended to not permit the modification of an instance after its creation so it has no setter methods.
 *
 */
public class AmmoCard {


    private final AmmoCube ammoCube1;
    private final AmmoCube ammoCube2;
    private final AmmoCube ammoCube3;

    private final Boolean powerUp;

    private static Random random;  //don't know why but SonarLint want it to be here even though it have no reason to be



    /**
     *
     * this constructor is set for AmmoCard that have just AmmoCubes in them
     *
     * @param color1 color of first AmmoCube
     * @param color2 color of second AmmoCube
     * @param color3 color of third AmmoCube
     */
    private AmmoCard(Color color1, Color color2, Color color3) {

        this.ammoCube1 = new AmmoCube(color1);
        this.ammoCube2 = new AmmoCube(color2);
        this.ammoCube3 = new AmmoCube(color3);

        this.powerUp = false;

    }

    /**
     *
     * this constructor is set for AmmoCard that have power up in them
     *
     * @param color1 color of first AmmoCube
     * @param color2 color of second AmmoCube
     */

    private AmmoCard(Color color1, Color color2){

        this.ammoCube1 = new AmmoCube(color1);
        this.ammoCube2 = new AmmoCube(color2);
        this.powerUp = true;

        this.ammoCube3 = null;

    }


    /**
     * @return new AmmoCard based on random function
     *
     * from the cardboard games we have:
     *
     *  3x YBB
     *  3x BRR
     *  3x YRR
     *  3x RYY
     *  3x BYY
     *  3x RBB
     *
     *  probabilities for this first group are: 18/36 * 3/18 = 3/36 = 1/12
     *
     *  2x YY + PowerUP
     *  2x BB + PowerUp
     *  2x RR + PowerUP
     *
     *  probabilities for this second group are: 6/36 * 2/6 = 2/36 = 1/18
     *
     *  4x YR + PowerUP
     *  4x YB + PowerUP
     *  4x RB + PowerUP
     *
     *  probabilities for this first group are: 12/36 * 4/12 = 4/36 = 1/9
     *
     */
    public static AmmoCard generateRandCard() {


        random = new Random();

        int k = random.nextInt(6);

        if (k>=0 && k<3){

            return genRandGroup0();

        }
        else if (k>3 && k<6){

            return genRandGroup2();


        }

        //if k==3
        return genRandGroup1();
    }


    /**
     * Sub function of generateRandCard() it handles the first group of cards:
     *
     *   3x YBB
     *   3x BRR
     *   3x YRR
     *   3x RYY
     *   3x BYY
     *   3x RBB
     *
     * @return an instance of the class
     */
    private static AmmoCard genRandGroup0(){

        random = new Random();
        int j = random.nextInt(6);

        if (j==0){

            return new AmmoCard(Color.YELLOW,Color.BLUE,Color.BLUE);
        }
        else if (j==1){

            return new AmmoCard(Color.BLUE,Color.RED,Color.RED);
        }
        else if (j==2){

            return new AmmoCard(Color.YELLOW,Color.RED,Color.RED);
        }
        else if (j==3){

            return new AmmoCard(Color.RED,Color.YELLOW,Color.YELLOW);
        }
        else if (j==4){

            return new AmmoCard(Color.BLUE,Color.YELLOW,Color.YELLOW);
        }

        // else if j==5

        return new AmmoCard(Color.RED,Color.BLUE,Color.BLUE);


    }

    /**
     * Sub function of generateRandCard() it handles the second group of cards:
     *
     *   2x YY + PowerUP
     *   2x BB + PowerUp
     *   2x RR + PowerUP
     *
     * @return an instance of the class
     */
    private static AmmoCard genRandGroup1(){

        random = new Random();

        int j = random.nextInt(3);

        if (j == 0){

            return new AmmoCard(Color.YELLOW,Color.YELLOW);
        }
        else if (j == 1){

            return new AmmoCard(Color.BLUE,Color.BLUE);
        }
        else if (j == 2){

            return new AmmoCard(Color.RED,Color.RED);
        }

        return null;
    }

    /**
     * Sub function of generateRandCard() it handles the third group of cards:
     *
     *   4x YR + PowerUP
     *   4x YB + PowerUP
     *   4x RB + PowerUP
     *
     * @return an instance of the class
     */
    private static AmmoCard genRandGroup2(){

        random = new Random();

        int j = random.nextInt(3);

        if (j == 0){

            return new AmmoCard(Color.YELLOW,Color.RED);
        }
        else if (j == 1){

            return new AmmoCard(Color.YELLOW,Color.BLUE);
        }

        // if j == 2

        return new AmmoCard(Color.RED,Color.BLUE);

    }



    /**
     *
     * @return boolean for if the player have to draw a powerUP
     */
    public Boolean getPowerUp() {
        return powerUp;
    }

    /**
     *
     * @return the color of the first AmmoCube
     */
    public Color getAmmoCube1() {
        return ammoCube1.getColor();
    }

    /**
     *
     * @return the color of the second AmmoCube
     */
    public Color getAmmoCube2() {
        return ammoCube2.getColor();
    }

    public List<AmmoCube> getAmmoList(){
        List<AmmoCube> l = new ArrayList<>();
        l.add(ammoCube1);
        l.add(ammoCube2);
        if(!powerUp){
            l.add(ammoCube3);
        }

        return l;
    }

    /**
     *
     * @return the color of the third AmmoCube or null if the AmmoCard contains a powerUP
     */
    public Color getAmmoCube3() {

        if (ammoCube3 == null){

            return null;

        }
        else return ammoCube3.getColor();
    }
}